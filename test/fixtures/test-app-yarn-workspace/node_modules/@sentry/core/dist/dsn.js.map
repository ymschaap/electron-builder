{"version":3,"file":"dsn.js","sourceRoot":"","sources":["../src/dsn.ts"],"names":[],"mappings":"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","sourcesContent":["import { SentryError } from './error';\n\n/** Regular expression used to parse a DSN. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w\\.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Supported Sentry transport protocols in a DSN. */\nexport type DSNProtocol = 'http' | 'https';\n\n/** Primitive components of a DSN. */\nexport interface DSNComponents {\n  /** Protocol used to connect to Sentry. */\n  protocol: DSNProtocol;\n  /** Public authorization key. */\n  user: string;\n  /** Private authorization key (deprecated, optional). */\n  pass?: string;\n  /** Hostname of the Sentry instance. */\n  host: string;\n  /** Port of the Sentry instance. */\n  port?: string;\n  /** Project path */\n  path: string;\n}\n\n/** Anything that can be parsed into a DSN. */\nexport type DSNLike = string | DSNComponents;\n\n/** The Sentry DSN, identifying a Sentry instance and project. */\nexport class DSN implements DSNComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DSNProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Project path */\n  public path!: string;\n\n  /** Creates a new DSN component */\n  public constructor(from: DSNLike) {\n    if (typeof from === 'string') {\n      this.fromString(from);\n    } else {\n      this.fromComponents(from);\n    }\n\n    this.validate();\n  }\n\n  /**\n   * Renders the string representation of this DSN.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    // tslint:disable-next-line:no-this-assignment\n    const { host, path, pass, port, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path}`\n    );\n  }\n\n  /** Parses a string into this DSN. */\n  private fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n    if (!match) {\n      throw new SentryError('Invalid DSN');\n    }\n\n    const [protocol, user, pass = '', host, port = '', path] = match.slice(1);\n    Object.assign(this, { host, pass, path, port, protocol, user });\n  }\n\n  /** Maps DSN components into this instance. */\n  private fromComponents(components: DSNComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path;\n  }\n\n  /** Validates this DSN and throws on error. */\n  private validate(): void {\n    for (const component of ['protocol', 'user', 'host', 'path']) {\n      if (!this[component as keyof DSNComponents]) {\n        throw new SentryError(`Invalid DSN: Missing ${component}`);\n      }\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(\n        `Invalid DSN: Unsupported protocol \"${this.protocol}\"`,\n      );\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`Invalid DSN: Invalid port number \"${this.port}\"`);\n    }\n  }\n}\n"]}