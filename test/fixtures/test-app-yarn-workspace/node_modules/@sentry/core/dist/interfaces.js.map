{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";;AAiBA,6CAA6C;AAC7C,IAAY,QASX;AATD,WAAY,QAAQ;IAClB,iCAAiC;IACjC,uCAAQ,CAAA;IACR,+CAA+C;IAC/C,yCAAS,CAAA;IACT,+DAA+D;IAC/D,yCAAS,CAAA;IACT,sCAAsC;IACtC,6CAAW,CAAA;AACb,CAAC,EATW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QASnB","sourcesContent":["import { Breadcrumb, Context, SentryEvent } from '@sentry/shim';\nimport { DSN } from './dsn';\nimport { SendStatus } from './status';\n\n/**\n * An exchangable object containing event metadata that will be merged into the\n * event payload before sending it to Sentry.\n *\n * Each Frontend creates an implicit scope when used directly. When using the\n * top-level exported functions, however, the shim maintains a stack of scopes\n * and injects them into the frontend.\n */\nexport interface Scope {\n  breadcrumbs: Breadcrumb[];\n  context: Context;\n}\n\n/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n\n/** Base configuration options for every SDK. */\nexport interface Options {\n  /**\n   * Specifies whether this SDK should activate and send events to Sentry.\n   * Disabling the SDK reduces all overhead from instrumentation, collecting\n   * breadcrumbs and capturing events. Defaults to true.\n   */\n  enabled?: boolean;\n\n  /**\n   * The DSN used to connect to Sentry and identify the project. If omitted, the\n   * SDK will not send any data to Sentry.\n   */\n  dsn?: string;\n\n  /**\n   * The release identifier used when uploading respective source maps. Specify\n   * this value to allow Sentry to resolve the correct source maps when\n   * processing events.\n   */\n  release?: string;\n\n  /** The current environment of your application (e.g. \"production\"). */\n  environment?: string;\n\n  /** The maximum number of breadcrumbs sent with events. Defaults to 100. */\n  maxBreadcrumbs?: number;\n\n  /** Console logging verbosity for the SDK Client. */\n  logLevel?: LogLevel;\n\n  /**\n   * A callback invoked during event submission, allowing to cancel the process.\n   * If unspecified, all events will be sent to Sentry.\n   *\n   * This function is called for both error and message events before all other\n   * callbacks. Note that the SDK might perform other actions after calling this\n   * function. Use {@link Options.beforeSend} for notifications on events\n   * instead.\n   *\n   * @param event The error or message event generated by the SDK.\n   * @returns True if the event should be sent, false otherwise.\n   */\n  shouldSend?(event: SentryEvent): boolean;\n\n  /**\n   * A callback invoked during event submission, allowing to optionally modify\n   * the event before it is sent to Sentry.\n   *\n   * This function is called after {@link Options.shouldSend} and just before\n   * sending the event and must return synchronously.\n   *\n   * Note that you must return a valid event from this callback. If you do not\n   * wish to modify the event, simply return it at the end. To cancel event\n   * submission instead, use {@link Options.shouldSend}.\n   *\n   * @param event The error or message event generated by the SDK.\n   * @returns A new event that will be sent.\n   */\n  beforeSend?(event: SentryEvent): SentryEvent;\n\n  /**\n   * A callback invoked after event submission has completed.\n   * @param event The error or message event sent to Sentry.\n   */\n  afterSend?(event: SentryEvent, status: SendStatus): void;\n\n  /**\n   * A callback allowing to skip breadcrumbs.\n   *\n   * This function is called for both manual and automatic breadcrumbs before\n   * all other callbacks. Note that the SDK might perform other actions after\n   * calling this function. Use {@link Options.beforeBreadcrumb} for\n   * notifications on breadcrumbs instead.\n   *\n   * @param breadcrumb The breadcrumb as created by the SDK.\n   * @returns True if the breadcrumb should be added, false otherwise.\n   */\n  shouldAddBreadcrumb?(breadcrumb: Breadcrumb): boolean;\n\n  /**\n   * A callback invoked when adding a breadcrumb, allowing to optionally modify\n   * it before adding it to future events.\n   *\n   * This function is called after {@link Options.shouldAddBreadcrumb} and just\n   * before persisting the breadcrumb. It must return synchronously.\n   *\n   * Note that you must return a valid breadcrumb from this callback. If you do\n   * not wish to modify the breadcrumb, simply return it at the end. To skip a\n   * breadcrumb instead, use {@link Options.shouldAddBreadcrumb}.\n   *\n   * @param breadcrumb The breadcrumb as created by the SDK.\n   * @returns The breadcrumb that will be added.\n   */\n  beforeBreadcrumb?(breadcrumb: Breadcrumb): Breadcrumb;\n\n  /**\n   * A callback invoked after adding a breadcrumb.\n   * @param breadcrumb The breadcrumb as created by the SDK.\n   */\n  afterBreadcrumb?(breadcrumb: Breadcrumb): void;\n}\n\n/**\n * User-Facing Sentry SDK Client Frontend.\n *\n * This interface contains all methods to interface with the SDK once it has\n * been installed. It allows to send events to Sentry, record breadcrumbs and\n * set a context included in every event. Since the SDK mutates its environment,\n * there will only be one instance during runtime. To retrieve that instance,\n * use {@link Client.getInstance}.\n *\n * Note that the call to {@link Frontend.install} should occur as early as\n * possible so that even errors during startup can be recorded reliably:\n *\n * @example\n * import { create } from '@sentry/node';\n * create({ dsn: '__DSN__' });\n *\n * @example\n * import { captureMessage } from '@sentry/node';\n * captureMessage('Custom message');\n */\nexport interface Frontend<O extends Options = Options> {\n  /**\n   * Installs the SDK if it hasn't been installed already.\n   *\n   * Since this performs modifications in the environment, such as instrumenting\n   * library functionality or adding signal handlers, this method will only\n   * execute once and cache its result.\n   *\n   * @returns If the installation was the successful or not.\n   */\n  install(): boolean;\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * @param exception An exception-like object.\n   * @param scope An optional scope containing event metadata.\n   * @returns The created event id.\n   */\n  captureException(exception: any, scope?: Scope): Promise<void>;\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * @param message The message to send to Sentry.\n   * @param scope An optional scope containing event metadata.\n   * @returns The created event id.\n   */\n  captureMessage(message: string, scope?: Scope): Promise<void>;\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * @param event The event to send to Sentry.\n   * @param scope An optional scope containing event metadata.\n   * @returns The created event id.\n   */\n  captureEvent(event: SentryEvent, scope?: Scope): Promise<void>;\n\n  /**\n   * Records a new breadcrumb which will be attached to future events.\n   *\n   * Breadcrumbs will be added to subsequent events to provide more context on\n   * user's actions prior to an error or crash. To configure the maximum number\n   * of breadcrumbs, use {@link Options.maxBreadcrumbs}.\n   *\n   * @param breadcrumb The breadcrumb to record.\n   * @param scope An optional scope to store this breadcrumb in.\n   */\n  addBreadcrumb(breadcrumb: Breadcrumb, scope?: Scope): void;\n\n  /** Returns the current DSN. */\n  getDSN(): DSN | undefined;\n\n  /** Returns the current options. */\n  getOptions(): O;\n\n  /**\n   * Updates context information (user, tags, extras) for future events.\n   *\n   * @param context A partial context object to merge into current context.\n   * @param scope An optional scope to store this the context in.\n   */\n  setContext(context: Context, scope: Scope): void;\n\n  /** Returns the inital scope for the shim. */\n  getInitialScope(): Scope;\n}\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Frontend} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Frontend in their constructor. When a\n * Backend automatically generates events or breadcrumbs, it must pass them to\n * the Frontend for validation and processing first.\n *\n * Usually, the Frontend will be of corresponding type, e.g. NodeBackend\n * receives NodeFrontend. However, higher-level SDKs can choose to instanciate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The frontend also provides access to options via {@link Frontend.getOptions}\n * and context via {@link Frontend.getContext}. Note that the user might update\n * these any time and they should not be cached.\n */\nexport interface Backend {\n  /** Installs the SDK into the environment. */\n  install(): boolean;\n\n  /** Creates a {@link SentryEvent} from an exception. */\n  eventFromException(exception: any): Promise<SentryEvent>;\n\n  /** Creates a {@link SentryEvent} from a plain message. */\n  eventFromMessage(message: string): Promise<SentryEvent>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: SentryEvent): Promise<number>;\n\n  /**\n   * Receives a breadcrumb and stores it in a platform-dependent way.\n   *\n   * This function is invoked by the frontend before merging the breadcrumb into\n   * the scope. Return `false` to prevent this breadcrumb from being merged.\n   * This should be done for custom breadcrumb management in the backend.\n   *\n   * In most cases, this method does not have to perform any action and can\n   * simply return `true`. It can either be synchronous or asynchronous.\n   *\n   * @param breadcrumb The breadcrumb to store.\n   * @param scope The scope instance currently managed by the frontend.\n   * @returns True if the breadcrumb should be merged by the frontend.\n   */\n  storeBreadcrumb(\n    breadcrumb: Breadcrumb,\n    scope: Scope,\n  ): boolean | Promise<boolean>;\n\n  /**\n   * Receives a context and merges it in a platform-dependent way.\n   *\n   * This function is invoked by the frontend before merging the context into\n   * the scope. Return `false` to prevent this context from being merged. This\n   * should be done for custom context management in the backend.\n   *\n   * In most cases, this method does not have to perform any action and can\n   * simply return `true`. It can either be synchronous or asynchronous.\n   *\n   * @param context The context to store.\n   * @param scope The scope instance currently managed by the frontend.\n   * @returns True if the breadcrumb should be merged by the frontend.\n   */\n  storeContext(context: Context, scope: Scope): boolean | Promise<boolean>;\n}\n"]}