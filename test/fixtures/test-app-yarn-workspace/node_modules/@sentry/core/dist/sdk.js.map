{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";;AAAA,mCAAqC;AAGrC,qCAQsB;AAPpB,kCAAA,gBAAgB,CAAA;AAChB,gCAAA,cAAc,CAAA;AACd,4BAAA,UAAU,CAAA;AACV,0BAAA,QAAQ,CAAA;AACR,2BAAA,SAAS,CAAA;AACT,iCAAA,eAAe,CAAA;AACf,gCAAA,cAAc,CAAA;AAQhB;;;;;;;GAOG;AACH,qBACE,aAAkC,EAClC,OAAU;IAEV,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;QAC3B,OAAO;KACR;IAED,IAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;IAC5C,QAAQ,CAAC,OAAO,EAAE,CAAC;IACnB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC5B,CAAC;AAXD,kCAWC","sourcesContent":["import * as Shim from '@sentry/shim';\nimport { Frontend, Options } from './interfaces';\n\nexport {\n  captureException,\n  captureMessage,\n  clearScope,\n  popScope,\n  pushScope,\n  setExtraContext,\n  setTagsContext,\n} from '@sentry/shim';\n\n/** A class object that can instanciate Frontend objects. */\nexport interface FrontendClass<F extends Frontend, O extends Options> {\n  new (options: O): F;\n}\n\n/**\n * Internal function to create a new SDK frontend instance. The frontend is\n * installed and then bound to the current scope.\n *\n * @param frontendClass The frontend class to instanciate.\n * @param options Options to pass to the frontend.\n * @returns The installed and bound frontend instance.\n */\nexport function initAndBind<F extends Frontend, O extends Options>(\n  frontendClass: FrontendClass<F, O>,\n  options: O,\n): void {\n  if (Shim.getCurrentClient()) {\n    return;\n  }\n\n  const frontend = new frontendClass(options);\n  frontend.install();\n  Shim.bindClient(frontend);\n}\n"]}