{"version":3,"file":"domain.js","sourceRoot":"","sources":["../src/domain.ts"],"names":[],"mappings":";;AAEA,0DAA0D;AAC1D,IAAI,MAIH,CAAC;AAEF,IAAI;IACF,2CAA2C;IAC3C,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;CAC5B;AAAC,WAAM;IACN,MAAM,GAAG,EAAE,CAAC;CACb;AAED,qEAAqE;AACrE;IACE,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC;IACjC,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,CAAC,UAAU,GAAG,QAAQ,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;KAC9C;IAED,OAAO,QAAQ,CAAC,KAAK,CAAC;AACxB,CAAC;AAZD,wCAYC","sourcesContent":["import { Registry, ScopeLayer } from './interfaces';\n\n/** A compatibility version for Node's \"domain\" module. */\nlet domain: {\n  active?: {\n    __SENTRY__?: Registry;\n  };\n};\n\ntry {\n  // tslint:disable-next-line:no-var-requires\n  domain = require('domain');\n} catch {\n  domain = {};\n}\n\n/** Checks for an active domain and returns its stack, if present. */\nexport function getDomainStack(): ScopeLayer[] | undefined {\n  const active = domain.active;\n  if (!active) {\n    return undefined;\n  }\n\n  let registry = active.__SENTRY__;\n  if (!registry) {\n    active.__SENTRY__ = registry = { stack: [] };\n  }\n\n  return registry.stack;\n}\n"]}