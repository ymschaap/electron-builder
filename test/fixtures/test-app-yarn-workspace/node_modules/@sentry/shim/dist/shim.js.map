{"version":3,"file":"shim.js","sourceRoot":"","sources":["../src/shim.ts"],"names":[],"mappings":"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","sourcesContent":["import { getDomainStack } from './domain';\nimport { getGlobalStack } from './global';\nimport { ScopeLayer } from './interfaces';\n\n/**\n * API compatibility version of this shim.\n *\n * WARNING: This number should only be incresed when the global interface\n * changes a and new methods are introduced.\n */\nexport const API_VERSION = 1;\n\n/**\n * Internal class used to make sure we always have the latest internal functions\n * working in case we have a version conflict.\n */\nexport class Shim {\n  /** Creates a new shim instance. */\n  public constructor(public readonly version: number = API_VERSION) {\n    const stack = getGlobalStack();\n    if (stack.length === 0) {\n      stack.push({ scope: {}, type: 'process' });\n    }\n  }\n\n  /**\n   * Checks if this shim's version is older than the given version.\n   *\n   * @param version A version number to compare to.\n   * @return True if the given version is newer; otherwise false.\n   */\n  public isOlderThan(version: number): boolean {\n    return this.version < version;\n  }\n\n  /**\n   * Creates a new 'local' ScopeLayer with the given client.\n   * @param client Optional client, defaults to the current client.\n   */\n  public pushScope(client?: any): void {\n    const usedClient = client || this.getCurrentClient();\n    this.getStack().push({\n      client: usedClient,\n      scope: this.getInitialScope(usedClient),\n      type: 'local',\n    });\n  }\n\n  /** Removes the top most ScopeLayer of the current stack. */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * Convenience method for pushScope and popScope.\n   *\n   * @param arg1 Either the client or callback.\n   * @param arg2 Either the client or callback.\n   */\n  public withScope(arg1: (() => void) | any, arg2?: (() => void) | any): void {\n    let callback: () => void = arg1;\n    let client: any = arg2;\n    if (!!(arg1 && arg1.constructor && arg1.call && arg1.apply)) {\n      callback = arg1;\n      client = arg2;\n    }\n    if (!!(arg2 && arg2.constructor && arg2.call && arg2.apply)) {\n      callback = arg2;\n      client = arg1;\n    }\n    this.pushScope(client);\n    try {\n      callback();\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /** Resets the current scope to the initialScope. */\n  public clearScope(): void {\n    const top = this.getStackTop();\n    top.scope = this.getInitialScope(top.client);\n  }\n\n  /** Returns the client of the currently active scope. */\n  public getCurrentClient(): any | undefined {\n    return this.getStackTop().client;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): ScopeLayer[] {\n    return getDomainStack() || getGlobalStack();\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): ScopeLayer {\n    return this.getDomainStackTop() || this.getGlobalStackTop();\n  }\n\n  /** Returns the topmost ScopeLayer from the global stack. */\n  private getGlobalStackTop(): ScopeLayer {\n    const stack = getGlobalStack();\n    return stack[stack.length - 1];\n  }\n\n  /** Tries to return the top most ScopeLayer from the domainStack. */\n  private getDomainStackTop(): ScopeLayer | undefined {\n    const stack = getDomainStack();\n    if (!stack) {\n      return undefined;\n    }\n\n    if (stack.length === 0) {\n      const client = this.getCurrentClient();\n      stack.push({\n        client,\n        scope: this.getInitialScope(client),\n        type: 'domain',\n      });\n    }\n\n    return stack[stack.length - 1];\n  }\n\n  /**\n   * Obtains a new scope instance from the client.\n   *\n   * @param client An SDK client that implements `getInitialScope`.\n   * @returns The scope instance or an empty object on error.\n   */\n  public getInitialScope(client?: any): any {\n    try {\n      return client && client.getInitialScope();\n    } catch {\n      return {};\n    }\n  }\n}\n"]}